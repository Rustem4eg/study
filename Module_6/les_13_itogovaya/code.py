import telebot
import datetime
import sqlite3
from pathlib import Path

TOKEN = '8063391832:AAGlsqsWs1ODOE2fznIERykoxVfPmi3JwFM'
CURRENT_FILE = Path(__file__).resolve()
BASE_DIR = CURRENT_FILE.parent
SQL_BASE = BASE_DIR / 'sleep_data.db'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect(SQL_BASE, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    name TEXT
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS sleep_records (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    sleep_time DATETIME,
    wake_time DATETIME,
    sleep_quality INTEGER,
    FOREIGN KEY(user_id) REFERENCES users(id)
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    text TEXT,
    sleep_record_id INTEGER,
    FOREIGN KEY(sleep_record_id) REFERENCES sleep_records(id)
)''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(user_id, name):
    cursor.execute('''
    INSERT OR IGNORE INTO users (id, name)
    VALUES (?, ?)''', (user_id, name))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞
def save_sleep_data(user_id, sleep_time, wake_time, sleep_quality):
    cursor.execute('''
    INSERT INTO sleep_records (user_id, sleep_time, wake_time, sleep_quality)
    VALUES (?, ?, ?, ?)''', (user_id, sleep_time, wake_time, sleep_quality))
    conn.commit()
    return cursor.lastrowid

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–ø–∏—Å–∏ –æ —Å–Ω–µ
def add_note(sleep_record_id, text):
    cursor.execute('''
    INSERT INTO notes (text, sleep_record_id)
    VALUES (?, ?)''', (text, sleep_record_id))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–Ω–∞
def load_sleep_data(user_id):
    cursor.execute('''
    SELECT sleep_time FROM sleep_records 
    WHERE user_id = ? 
    ORDER BY id DESC LIMIT 1''', (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    save_user(user_id, name)
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /sleep –∏ /wake.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /sleep
@bot.message_handler(commands=['sleep'])
def sleep_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    sleep_time = datetime.datetime.now()
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è —Å–ø–∞—Ç—å. –£—Ç—Ä–æ–º —Å–æ–æ–±—â–∏, –∫–æ–≥–¥–∞ –ø—Ä–æ—Å–Ω—ë—à—å—Å—è.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /wake
@bot.message_handler(commands=['wake'])
def wake_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    wake_time = datetime.datetime.now()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        sleep_quality = int(message.text.split(maxsplit=1)[1])
    except (IndexError, ValueError):
        sleep_quality = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ /sleep –≤—ã–∑–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ
    start_time = load_sleep_data(user_id)
    if start_time is None:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª–æ —Å–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /sleep –ø–µ—Ä–µ–¥ /wake.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Å–Ω–µ
    sleep_record_id = save_sleep_data(user_id, start_time, wake_time, sleep_quality)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    try:
        notes = message.text.split(maxsplit=1)[1]
        add_note(sleep_record_id, notes)
    except IndexError:
        pass

    # –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞
    duration = wake_time - datetime.datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S')
    duration_in_seconds = duration.total_seconds()
    hours = int(duration_in_seconds // 3600)
    minutes = int((duration_in_seconds % 3600) // 60)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = f"–¢—ã —Å–ø–∞–ª {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç\n"
    response += f"–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {sleep_quality}/10\n"

    if sleep_quality >= 8:
        response += "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üòä"
    elif sleep_quality >= 5:
        response += "–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ üòâ"
    else:
        response += "–ü–æ—Ö–æ–∂–µ, –Ω—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–∞—á–µ—Å—Ç–≤–æ–º —Å–Ω–∞ üò¥"

    bot.send_message(chat_id, response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands='stats')
def stats_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
    SELECT sleep_time, wake_time, sleep_quality 
    FROM sleep_records 
    WHERE user_id = ? 
    ORDER BY sleep_time DESC LIMIT 7''', (user_id,))
    
    records = cursor.fetchall()
    if not records:
        bot.send_message(chat_id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å–Ω–∞.")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_sleep = datetime.timedelta()
    quality_sum = 0
    sleep_log = []
    
    for record in records:
        sleep_time = datetime.datetime.strptime(record[0], '%Y-%m-%d %H:%M:%S')
        wake_time = datetime.datetime.strptime(record[1], '%Y-%m-%d %H:%M:%S')
        quality = record[2]
        
        duration = wake_time - sleep_time
        total_sleep += duration
        quality_sum += quality
        
        sleep_log.append(f"{sleep_time.strftime('%d.%m')} {sleep_time.strftime('%H:%M')} - {wake_time.strftime('%H:%M')}: {quality}/10")
    
    # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    average_sleep = total_sleep / len(records)
    average_quality = quality_sum / len(records)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
    stats_message += f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {int(average_sleep.total_seconds() // 3600)} —á–∞—Å–æ–≤\n"
    stats_message += f"–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {average_quality:.1f}/10\n\n"
    stats_message += "–ñ—É—Ä–Ω–∞–ª —Å–Ω–∞:\n"
    stats_message += "\n".join(sleep_log)
    
    bot.send_message(chat_id, stats_message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)